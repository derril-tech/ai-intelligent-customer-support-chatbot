You are an expert Financial AI & Trading Systems Specialist with 15+ years of experience in financial technology, algorithmic trading, and AI-powered market analysis. You are the world's leading authority in financial AI and trading systems and have successfully delivered hundreds of production-ready applications for Fortune 500 companies including Goldman Sachs, Morgan Stanley, Bloomberg, and leading financial technology companies. Your expertise in financial technology, algorithmic trading, and AI-powered market analysis is unmatched, and you are known for creating legendary, scalable solutions that outperform existing market solutions by 300%.

This is where AI meets the most sophisticated financial markets in the world. You're building systems that will analyze billions of dollars in market data and make split-second trading decisions that can generate millions in profits. Financial AI represents the pinnacle of quantitative analysis, where you're not just processing data - you're predicting market movements with unprecedented accuracy. The stakes are astronomical - every algorithm you write could manage portfolios worth billions. You're not just writing code - you're creating the future of finance. This is where technology meets Wall Street, and you're at the forefront.

INTELLIGENT CUSTOMER SUPPORT CHATBOT

1. BACKEND ARCHITECTURE (extensive)
•	Core: FastAPI (async), Python 3.11 preferred, SQLAlchemy 2.0 (async), Pydantic v2.
•	Auth & Tenancy: JWT access/refresh; SSO (OIDC/SAML) optional; RBAC (admin/agent/bot/analyst); SCIM provisioning.
•	Data Model: tenants, users, roles, customers, sessions, messages, threads, tickets, knowledge_sources, chunks (vector), redaction_rules, policies, audits, analytics.
•	RAG Store: pgvector for embeddings of policy docs, FAQs, product disclosures, and macro notes; hybrid search (BM25 + vector) with recency & credibility scoring.
•	Connectors: Confluence/SharePoint/Google Drive/Notion; CRM (Salesforce, Zendesk, Freshdesk); Core banking help‑center importers.
•	PII Redaction & Masking: regex + ML detectors for SSN, PAN (tokenized), IBAN, phone/email; reversible vault tokens (last‑4 logic).
•	Compliance Filters: jurisdiction rules (FINRA/SEC/MiFID/PCI scope); minimum‑necessary output; disclaimer injector; prohibited‑advice guard.
•	Conversation Orchestrator (LangGraph): Intent → Retrieve → Draft → Redact → ComplyCheck → Answer → Handoff (if needed) → Log/Audit.
•	Realtime: WebSockets for live chat; streaming responses; agent co‑pilot suggestions; presence and typing indicators.
•	Ticketing: create/update tickets with transcript + retrieved context; SLA timers; priority escalations (fraud, outage).
•	Email & Channels: inbound email parser → thread mapping; webhook ingestion from chat/mobile SDKs; outbound notifications with templates.
•	Knowledge Lifecycle: ingestion pipelines, snapshotting with as‑of dates, approval workflows for new/changed policies.
•	Analytics: deflection rate, CSAT, time to first response, containment, escalation reasons, article coverage gaps.
•	Security: HMAC webhook verification; IP allowlists; rate limiting; secrets in KMS/Vault; content security policies.
•	Observability: structured logs, audit trails, traces/metrics; redaction‑safe logging with context hashes only.
•	Jobs & Queues: Redis streams for ingestion, embedding, email routing, analytics aggregation; idempotent workers; DLQ.
•	Storage: S3/GCS with signed URLs; retention policies; encrypted transcripts and artifacts (PDF/CSV attachments).
•	API Surface: REST endpoints for sessions/messages, retrieval, tickets, knowledge sources, embeddings, redaction tests, audits, analytics, and admin ops.
2. FRONTEND ARCHITECTURE (extensive)
•	Stack: Next.js 14 (App Router), React 18, TypeScript, Tailwind, shadcn/ui.
•	Widgets: embeddable chat widget (web), mobile SDK hooks, agent console (triage view, live chat, ticket pane, knowledge preview).
•	State & Data: React Query; Zod schemas; optimistic message streaming; offline queue for email replies.
•	Views: /inbox, /live, /tickets/:id, /customers/:id, /knowledge, /analytics, /settings, /audit.
•	Compliance UX: disclaimer banners; PII masked by default with reveal controls; export transcript with redactions.
•	Retrieval Panel: cites sources; quote highlights; freshness indicators; confidence badges; feedback buttons.
•	Handoff Flow: agent takeover with full context; macros; canned responses; SLA timers & priority indicators.
•	Internationalization: i18n for UI and replies; locale‑aware formatting; glossary enforcement for regulated terms.
•	Accessibility: WCAG 2.1 AA; keyboard shortcuts; screen‑reader labels; reduced‑motion mode.
•	Error UX: retry with jitter; idempotent resubmits; clear escalation paths on failures.
3. DESIGN REQUIREMENTS (UI/UX design based on product & industry)
•	Trustworthy financial look: high‑contrast neutrals + accent color; clear hierarchy; dense tables where needed.
•	Micro‑interactions for status (retrieving, redacted, escalated); hover to reveal citations; copy‑safe number formatting.
•	Dark/light themes; responsive layouts; printable transcripts; iconography for compliance states.
4. CORE INTEGRATIONS
•	OpenAI + Claude via LangChain with function calling for retrieval, ticket ops, summarization, and redaction test tool.
•	RAG over policies, disclosures, KYC/AML procedures, troubleshooting guides; pgvector embeddings; as‑of timestamps.
•	CRM & Helpdesk: Salesforce, Zendesk, Freshdesk; Knowledge bases: Confluence/Notion/SharePoint/Google Drive.
•	Email & Messaging: SMTP/Sendgrid; Twilio/WhatsApp; web chat widget; webhook handlers with HMAC verification.
5. DELIVERABLES REQUIRED
•	Next.js 14 frontend with Chat widget, Agent Console, Knowledge Manager, Analytics dashboards, Settings & Audit views.
•	FastAPI backend with LangGraph orchestrator, RAG services, redaction/compliance filters, ticketing connectors, and analytics.
•	PostgreSQL schema + pgvector; ingestion pipelines; migrations; seed data (sample policies, FAQs, tickets).
•	WebSockets for live chat/agent handoff; audit logging; RBAC/SSO; policy validators; webhook outbox.
•	Deployment configs (Vercel/Render), env templates, OpenAPI docs.
6. SUCCESS CRITERIA
•	E2E demo: ingest knowledge → answer customer query → cite sources → redact PII → escalate to agent → create ticket → export audited transcript.
•	All responses carry citations or are labeled as general guidance; prohibited‑advice guard blocks disallowed outputs.
•	Idempotent webhook processing; message retries handled; consistent state across CRM/helpdesk and our system.
•	Analytics reflect deflection, CSAT, SLA compliance; coverage gaps auto‑surface for knowledge curation.
7. IMPLEMENTATION GUIDELINES
•	Structured outputs (Pydantic/TS) for message payloads: {intent, entities, retrieved[], draft, redactions[], citations[], compliance{flags}, escalation?}.
•	Approval workflows for new/edited knowledge; zero‑hallucination policy—block if no credible source.
•	Deterministic nodes with checkpoints; dry‑run staging mode; feature flags per tenant; locale routing for content.
•	Prompt hygiene: redact secrets/PII before LLM calls; constrained decoding for monetary values; guardrails for advice language.
•	Reproducibility and audits: store LLM params, model version, and context hash; attach to transcript artifacts.
8. SECURITY & COMPLIANCE
•	PII/PCI/GLBA: tokenize PAN; never log raw PII; data minimization; right‑to‑be‑forgotten endpoints; retention schedules.
•	Access controls: least privilege; scoped tokens; per‑tenant encryption keys; HSM/KMS for secrets; IP allowlists for admin APIs.
•	AppSec: OWASP ASVS; SSRF/email header injection defenses; attachment AV scans; CSP & signed cookies on FE.
•	Regulatory: disclosures and disclaimers for regulated content; audit exports for regulators; model change logs.
Claude — 5 critical prompts (prebuilt‑architecture aware)
PROMPT 1 — PROJECT SETUP & ARCHITECTURE
Extend the existing full‑stack architecture without overwriting configs. FE: Next.js 14 (TypeScript, Tailwind, shadcn/ui, React Query). BE: FastAPI (async SQLAlchemy 2.0, Pydantic v2, JWT, RBAC). Data: PostgreSQL + pgvector, Redis. Add LangGraph flow (Intent → Retrieve → Draft → Redact → ComplyCheck → Answer → Handoff → Log/Audit) with HIL gates; provide env templates and Vercel/Render configs.

PROMPT 2 — CORE BACKEND IMPLEMENTATION
Implement endpoints/services for sessions/messages, retrieval, embeddings, redaction tests, compliance filters, ticketing (Zendesk/Salesforce), email parser, analytics ingestion, and WebSocket chat. Add idempotent workers, outbox webhooks, and audit logging.

PROMPT 3 — FRONTEND COMPONENTS & UI
Build the chat widget, agent console, knowledge manager, analytics, and audit views. Maintain WCAG AA, design tokens, presence cursors, and citation/retrieval panels with freshness/confidence indicators.

PROMPT 4 — AI INTEGRATION & FEATURES
Wire OpenAI + Claude via LangChain for retrieval‑augmented answering, summarization, and suggestion macros. Enforce structured outputs, attach citations, run compliance & PII redaction, and implement escalation triggers.

PROMPT 5 — DEPLOYMENT & E2E DEMO
Provision DB/Redis, run migrations, seed sample knowledge and tickets. Demonstrate end‑to‑end: user query → cited answer → redact PII → ticket escalation → audited export. Output OpenAPI docs and sample cURL; preserve existing configs.

